<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <delete_script><![CDATA[(function executeDelete(v_record) {     // Parameters:     //      v_record - a map of field names and values containing (among others) the     //              sys_id of the record that needs to be deleted on the remote system     //          v_record.<field_name>                  - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record);]]></delete_script>
        <editable>false</editable>
        <enhanced_capacity>false</enhanced_capacity>
        <flow/>
        <insert_script><![CDATA[(function executeInsert(v_record) {     // Parameters:     //      v_record is a map of field names and values containing the sys_id of the     //              record and the fields that need to be inserted in the record on the     //              remote system (source of data)          //          v_record.<field_name>                   - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record);]]></insert_script>
        <name>Populate Available updates</name>
        <script><![CDATA[(function executeQuery(v_table, v_query) {
    var res = {};

    function getAvailableVersion(appSysId) {
        var vers = [];
        var v = new GlideRecord('sys_app_version');
        v.addQuery('source_app_id', '=', appSysId);
        v.orderByDesc('version');
        v.query();
        while (v.next()) {
            vers.push({
                'sys_id': v.getUniqueValue(),
                'name': v.getDisplayValue(),
                'version': v.getValue('version'),
                'publish_date': v.getValue('publish_date')
            });
        }
        return vers;
    }

    function compareVersion(currentVer, availableVer) {
        var current = currentVer.split('.').map(Number);
        var available = availableVer.split('.').map(Number);
        if (current[0] !== available[0]) return 'major';
        if (current[1] !== available[1]) return 'minor';
        if (current[2] !== available[2]) return 'patch';
        return 'no';
    }

    function isNewerVersion(v1, v2) {
        var a = v1.split('.').map(Number);
        var b = v2.split('.').map(Number);
        for (var i = 0; i < 3; i++) {
            if (a[i] > b[i]) return true;
            if (a[i] < b[i]) return false;
        }
        return false;
    }

    var storeAppVer = new GlideRecord('sys_store_app');
    storeAppVer.addQuery('active', '=', true);
    storeAppVer.addQuery('update_available', '=', true);
    storeAppVer.query();

    while (storeAppVer.next()) {
        var appId = storeAppVer.getUniqueValue();
        var installedVersion = storeAppVer.getValue('version');
        var availableVersions = getAvailableVersion(appId);

        if (!res[appId]) {
            res[appId] = {};
        }

        for (var i = 0; i < availableVersions.length; i++) {
            var ver = availableVersions[i];
            var level = compareVersion(installedVersion, ver.version);
            if (level === 'no') continue;

            if (!res[appId][level] || isNewerVersion(ver.version, res[appId][level].version)) {
                res[appId][level] = {
                    sys_id: ver.sys_id,
                    application: appId,
                    level: level,
                    available_version: ver.sys_id,
                    version: ver.version,
                    installed_version: installedVersion,
                    name: storeAppVer.getDisplayValue() + ' - ' + ver.version,
                    batch_level: level,
                    major_count: level === 'major' ? 1 : 0,
                    minor_count: level === 'minor' ? 1 : 0,
                    patch_count: level === 'patch' ? 1 : 0
                };
            }
        }
    }

    // Add all available levels (major, minor, patch) even if they point to same version
    for (var app in res) {
        var seenVersions = {};
        for (var level of ['major', 'minor', 'patch']) {
            var entry = res[app][level];
            if (entry) {
                var uniqueKey = entry.version + '-' + level;
                if (!seenVersions[uniqueKey]) {
                    v_table.addRow(entry);
                    seenVersions[uniqueKey] = true;
                }
            }
        }
    }
})(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>nia.mccash</sys_created_by>
        <sys_created_on>2024-11-21 21:16:20</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>432d298dc3cad2108dbc32f1b401312f</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>Populate Available updates</sys_name>
        <sys_package display_value="Batch Installer for Store Updates" source="x_23746_batch_in_0">11aba50dc3cad2108dbc32f1b4013123</sys_package>
        <sys_policy/>
        <sys_scope display_value="Batch Installer for Store Updates">11aba50dc3cad2108dbc32f1b4013123</sys_scope>
        <sys_update_name>sys_script_vtable_432d298dc3cad2108dbc32f1b401312f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-17 18:09:08</sys_updated_on>
        <table>x_23746_batch_in_0_st_available_update</table>
        <update_script><![CDATA[(function executeUpdate(v_record, v_changed_fields) {     // Parameters:     //    v_record - a map of field names and values containing the sys_id of the record     //          v_record.<field_name>                   - fields in the remote table GlideRecord     //          v_record.setLastErrorMessage(message)   - signal an error     //    v_changed_fields - a map of field names and values containing the sys_id of the     //          v_changed_fields.<field_name>           - changed fields in the remote table GlideRecord      // Sample code:     //  try {     //      update-external-system;     //      if (there-was-an-error) {     //          var message = ...;     //          v_record.setLastErrorMessage(message);     //      }     //  } catch (ex) {     //      var message = ex.getMessage();     //      v_record.setLastErrorMessage(message);     //  }  })(v_record, v_changed_fields);]]></update_script>
    </sys_script_vtable>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>432d298dc3cad2108dbc32f1b401312f</id>
        <sys_created_by>nia.mccash</sys_created_by>
        <sys_created_on>2024-11-21 21:16:20</sys_created_on>
        <sys_id>fd6d298dc3cad2108dbc32f1b4013187</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>nia.mccash</sys_updated_by>
        <sys_updated_on>2024-11-21 21:16:20</sys_updated_on>
        <table>sys_script_vtable</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
